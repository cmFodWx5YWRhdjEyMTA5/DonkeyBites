#!/usr/local/bin/python2.7
#

import sys
import logging
import sys
import os

sys.path.append("/opt/stash-home/data/repositories/11/hooks/utils")
hook = os.path.basename(sys.argv[0])

import utils
import git_utils
import jira_utils
import jenkins_utils

def run( lines , version ):

    # Create mail message
    mailer = utils.init_mailer()
    
    # Get commit info
#    old_rev=lines[1] 
#    new_rev=lines[2]
#    ref_name = lines[3]
    old_rev, new_rev, ref_name ,user = lines[1:]
    gitMessage = git_utils.git_get_commit_msg( new_rev )
    
    jenkins_url = git_utils.git_config_get(jenkins_utils.JENKINS_SERVER_URL)
    jenkins_job = git_utils.git_config_get(jenkins_utils.JENKINS_JOB)
   
    branches = git_utils.git_config_get(git_utils.SANDBOX_HOOK_BRANCHES)
    branch_src_pattern = git_utils.git_config_get(git_utils.SANDBOX_HOOK_BRANCH_PATTERN)
    logging.debug("Branches: [%s], branch_src_pattern:[%s]" %(branches, branch_src_pattern) )
    if branch_src_pattern == None or branch_src_pattern == "":
    	logging.error( "Missing configuration parameter for branch suffix [_stg_]")
	return

#    user = git_utils.get_push_user()
    super_users = git_utils.git_config_get(git_utils.SANDBOX_HOOK_SUPER_USERS).split(",")    	
    curBranchName = git_utils.get_branch_name(ref_name)
    logging.debug("Current branch name:[%s]" %curBranchName )
    for branch in branches.split(','):
    	if curBranchName.find(branch+branch_src_pattern) == 0 and curBranchName != branch :
            logging.debug("In branches branch name:%s" %curBranchName )
            send_to = gitMessage.fields[git_utils.FLD_EMAIL]

            # Check which component this is
            comps=[] 
            for commitID in git_utils.get_commit_list_in_branch_not_in(curBranchName,branch).split("\n"):
            	comps.append(git_utils.get_commit_component_name(commitID))
                logging.debug("The commitId:[%s]" %commitID )
            logging.debug("The org commitId:[%s]" %new_rev )
 
	    comp_name  = set(comps) 
            logging.debug("The component:[%s]" %comp_name )

            if len(comp_name)==1 and "ui" in comp_name :
                jenkins_job = "sandbox-ui"
                
            elif len(comp_name)==1 and "server" in comp_name:
                jenkins_job = "sandbox-server"
                
            elif len(comp_name)==2 or "error" in comp_name :

           	if user in super_users:
                    comp_name.remove("error")
                    comp_name.add("super_user")
                    jenkins_jobs = ["sandbox-server","sandbox-ui"]
                else:
                	    jenkins_job = "" 
            if branch != "dev":
                jenkins_job = "branch-" + jenkins_job

            logging.debug("The job:[%s]" %jenkins_job )

            # Prepare the mail fields
            subject = "[git sandbox] branch %s build queued" %(curBranchName)
            message = "Git commit message:"
            for field,value in gitMessage.fields.items():
                message += "\n\t%s: %s" %(field,value)

            message += "\n\nHook info"
            message += "\n\tVersion: %s" %version
            message += "\n\tlines:%s" %lines
            if jenkins_job != "" and "error" not in comp_name :
                jobNumber = jenkins_utils.runJob( jenkins_url , jenkins_job , curBranchName , branch , curBranchName, send_to )
                logging.debug( "Job started running. %s/job/%s/%s/" %(jenkins_url,jenkins_job,jobNumber) )

            if "super_user" in comp_name:
                for jenkins_job in jenkins_jobs:
                    jobNumber = jenkins_utils.runJob(jenkins_url, jenkins_job, curBranchName, branch, curBranchName, send_to)
                    logging.debug("Job started running. %s/job/%s/%s/" % (jenkins_url, jenkins_job, jobNumber))

            if "error" in comp_name :
                subject = "[git sandbox] Your commit includes changes to both Server and UI"
                message = "Your commit is rejected"
 
            # send mail
            mailer.send(subject, send_to, message)
            break


def main(  ):
    utils.init_logger()
    try:
        version = git_utils.git_config_get(git_utils.SANDBOX_VERSION)
        logging.debug("**** post-receive hook running version: %s ****" %version )
        lines =sys.argv
        logging.debug("**** post-receive the LINE: %s " %lines )
        for line in lines:
            logging.debug("git line: %s" %line )
        run(lines,version)
        logging.debug("**** post-receive hook finished running ****" )
    except:
        logging.warning( "Fail triggering job, Unexpected error", exc_info=True )
    

if __name__ == '__main__':
    main()
